---
import '../styles/globals.css';
import '../styles/components.css';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  noindex?: boolean;
}

const {
  title,
  description = "Bitcoin vs Real Estate Investment Comparison Tool - Compare your Bitcoin stack against real estate investments with comprehensive analysis including mortgage calculations, tax benefits, and ROI projections.",
  image = "/btchome/og-image.png",
  noindex = false,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    {noindex && <meta name="robots" content="noindex, nofollow" />}

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />

    <!-- Theme Color (will be updated by theme manager) -->
    <meta name="theme-color" content="#ffffff" />

    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Import global styles (via frontmatter imports above) -->
    <style>
      /* Critical CSS for theme initialization */
      html {
        color-scheme: light dark;
      }

      /* Prevent flash of unstyled content */
      body {
        visibility: hidden;
      }

      body.theme-loaded {
        visibility: visible;
      }

      /* Loading spinner for initial load */
      .initial-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #ffffff;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        transition: opacity 0.3s ease-out;
      }

      .dark .initial-loader {
        background: #0f172a;
      }

      .initial-loader.hidden {
        opacity: 0;
        pointer-events: none;
      }

      .loader-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #e2e8f0;
        border-top: 3px solid #ed7611;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>

  </head>
  <body>
    <!-- Initial loading spinner -->
    <div id="initial-loader" class="initial-loader">
      <div class="loader-spinner"></div>
    </div>

    <!-- Main content with enforced gutters -->
    <div id="app" class="app-gutters" style="opacity: 0; transition: opacity 0.3s ease-in;">
      <slot />
    </div>

    <!-- Theme initialization script -->
    <script>
      // Initialize theme immediately to prevent flash
      (function() {
        const getStoredTheme = () => localStorage.getItem('btchome-theme') || 'system';
        const getSystemTheme = () => window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';

        const theme = getStoredTheme();
        const effectiveTheme = theme === 'system' ? getSystemTheme() : theme;

        document.documentElement.classList.add(effectiveTheme);
        document.body.classList.add('theme-loaded');

        // Update theme color meta tag
        const metaThemeColor = document.querySelector('meta[name="theme-color"]');
        if (metaThemeColor) {
          metaThemeColor.setAttribute('content', effectiveTheme === 'dark' ? '#0f172a' : '#ffffff');
        }

        // Hide loader and show app after a brief delay
        setTimeout(() => {
          const loader = document.getElementById('initial-loader');
          const app = document.getElementById('app');

          if (loader) {
            loader.classList.add('hidden');
            setTimeout(() => loader.remove(), 300);
          }

          if (app) {
            app.style.opacity = '1';
          }
        }, 100);
      })();
    </script>
  </body>
</html>


