---
// Theme Toggle Component
---

<button
  id="theme-toggle"
  class="btn-ghost p-2 rounded-lg transition-all duration-200 hover:bg-gray-100 dark:hover:bg-gray-800 focus:ring-2 focus:ring-bitcoin-500"
  aria-label="Toggle theme"
  title="Toggle theme"
>
  <!-- Sun icon (light mode) -->
  <svg
    id="sun-icon"
    class="w-5 h-5 text-gray-600 dark:text-gray-400 transition-transform duration-200"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    ></path>
  </svg>
  
  <!-- Moon icon (dark mode) -->
  <svg
    id="moon-icon"
    class="w-5 h-5 text-gray-600 dark:text-gray-400 transition-transform duration-200 hidden"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    ></path>
  </svg>
</button>

<script>
  import { themeManager } from '../utils/theme';

  class ThemeToggle extends HTMLElement {
    private button: HTMLButtonElement | null = null;
    private sunIcon: SVGElement | null = null;
    private moonIcon: SVGElement | null = null;
    private unsubscribe: (() => void) | null = null;

    constructor() {
      super();
      this.init();
    }

    private init() {
      this.button = this.querySelector('#theme-toggle');
      this.sunIcon = this.querySelector('#sun-icon');
      this.moonIcon = this.querySelector('#moon-icon');

      if (!this.button || !this.sunIcon || !this.moonIcon) {
        console.error('ThemeToggle: Required elements not found');
        return;
      }

      // Set initial icon state
      this.updateIcon();

      // Add click handler
      this.button.addEventListener('click', this.handleToggle.bind(this));

      // Subscribe to theme changes
      this.unsubscribe = themeManager.subscribe(() => {
        this.updateIcon();
      });
    }

    private handleToggle() {
      themeManager.toggleTheme();
      
      // Add a subtle animation
      if (this.button) {
        this.button.style.transform = 'scale(0.95)';
        setTimeout(() => {
          if (this.button) {
            this.button.style.transform = 'scale(1)';
          }
        }, 100);
      }
    }

    private updateIcon() {
      if (!this.sunIcon || !this.moonIcon) return;

      const isDark = themeManager.isDark();
      
      if (isDark) {
        this.sunIcon.classList.add('hidden');
        this.moonIcon.classList.remove('hidden');
      } else {
        this.sunIcon.classList.remove('hidden');
        this.moonIcon.classList.add('hidden');
      }
    }

    disconnectedCallback() {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }
  }

  // Register the custom element
  if (typeof window !== 'undefined' && !customElements.get('theme-toggle')) {
    customElements.define('theme-toggle', ThemeToggle);
  }

  // Initialize immediately if DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      const toggle = document.querySelector('#theme-toggle');
      if (toggle && !toggle.closest('theme-toggle')) {
        const wrapper = document.createElement('theme-toggle');
        toggle.parentNode?.insertBefore(wrapper, toggle);
        wrapper.appendChild(toggle);
      }
    });
  } else {
    const toggle = document.querySelector('#theme-toggle');
    if (toggle && !toggle.closest('theme-toggle')) {
      const wrapper = document.createElement('theme-toggle');
      toggle.parentNode?.insertBefore(wrapper, toggle);
      wrapper.appendChild(toggle);
    }
  }
</script>

<style>
  #theme-toggle {
    position: relative;
    overflow: hidden;
  }

  #theme-toggle::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: var(--color-bitcoin-500);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: width 0.3s ease, height 0.3s ease;
    opacity: 0.1;
    z-index: -1;
  }

  #theme-toggle:hover::before {
    width: 100%;
    height: 100%;
  }

  #sun-icon,
  #moon-icon {
    transition: transform 0.2s ease, opacity 0.2s ease;
  }

  #theme-toggle:hover #sun-icon,
  #theme-toggle:hover #moon-icon {
    transform: rotate(15deg) scale(1.1);
  }
</style>
