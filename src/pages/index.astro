---
import BaseLayout from '../layouts/BaseLayout.astro';
import Icon from '../components/Icon.astro';
import { runScenarios } from '@/services/scenarios';
---

<BaseLayout title="BTCHome – Model Buying vs Renting vs Stacking Bitcoin">
  <!-- Hero Controls -->
  <section class="section-padding">
    <div class="container-pro">
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-gradient-to-br from-bitcoin-500 to-bitcoin-600 rounded-xl flex items-center justify-center shadow-lg">
            <Icon name="bitcoin" size="sm" class="text-white" />
          </div>
          <h1 class="text-2xl md:text-3xl font-semibold text-gray-900 dark:text-white">BTC<span class="text-gradient-bitcoin">Home</span></h1>
        </div>
        <button id="show-advanced" class="px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition text-sm">
          Customize
        </button>
      </div>

      <!-- Main Controls Row -->
      <div class="glass rounded-2xl p-4 md:p-6 border border-gray-200 dark:border-gray-700 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Your Bitcoin Stack</label>
            <div class="flex items-center bg-white dark:bg-gray-800 border-2 border-bitcoin-300 dark:border-bitcoin-700 rounded-xl overflow-hidden shadow-lg">
              <span class="px-3 text-bitcoin-500 font-bold text-lg">₿</span>
              <input id="btc-amount" type="number" class="w-full px-3 py-2 text-xl font-mono text-center bg-transparent border-0 focus:ring-2 focus:ring-bitcoin-500 outline-none" value="1.5" step="0.00000001" />
            </div>
            <div class="text-xs text-gray-500">@ <span id="btc-price">$67,000</span>/BTC = <span id="btc-value" class="font-semibold">$100,500</span></div>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Purchase Timing</label>
            <select id="purchase-timing" class="w-full px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-bitcoin-500 h-[52px]">
              <option value="now">Buy Now (Year 0)</option>
              <option value="year-1">Buy in Year 1</option>
              <option value="year-2">Buy in Year 2</option>
              <option value="year-3">Buy in Year 3</option>
              <option value="year-5">Buy in Year 5</option>
            </select>
            <div class="text-xs text-gray-500">When to spend BTC on house</div>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Projection Model</label>
            <select id="model" class="w-full px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-bitcoin-500 h-[52px]">
              <option value="saylor">Digital Energy (Saylor)</option>
              <option value="power-law">Power Law (Santostasi)</option>
              <option value="s2f">Stock-to-Flow (PlanB)</option>
              <option value="log-regression">Rainbow Chart</option>
              <option value="metcalfe">Metcalfe's Law</option>
              <option value="rainbow">Rainbow Regression</option>
              <option value="plan-b">S2F Cross Asset</option>
            </select>
            <div class="text-xs text-gray-500">BTC price projection</div>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Time Horizon</label>
            <div class="inline-flex rounded-lg overflow-hidden border border-gray-300 dark:border-gray-700 w-full h-[52px]">
              <button class="flex-1 px-3 py-2 text-sm" data-years="5">5y</button>
              <button class="flex-1 px-3 py-2 text-sm text-white bg-bitcoin-500" data-years="10">10y</button>
              <button class="flex-1 px-3 py-2 text-sm" data-years="15">15y</button>
              <button class="flex-1 px-3 py-2 text-sm" data-years="20">20y</button>
            </div>
            <div class="text-xs text-gray-500">Total analysis period</div>
          </div>
        </div>
      </div>

      <!-- Customize Carousel (Hidden by default) -->
      <div id="advanced-controls" class="hidden glass rounded-2xl border border-gray-200 dark:border-gray-700 mb-6 overflow-hidden">
        <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-800">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Customize Your Assumptions</h3>
          <button id="close-advanced" class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
            <Icon name="close" size="sm" />
          </button>
        </div>

        <!-- Carousel Navigation -->
        <div class="flex border-b border-gray-200 dark:border-gray-800">
          <button class="carousel-tab active flex-1 px-4 py-3 text-sm font-medium text-center border-b-2 border-bitcoin-500 text-bitcoin-600 dark:text-bitcoin-400" data-tab="home">
            <Icon name="home" size="sm" class="inline mr-2" />
            Home Purchase
          </button>
          <button class="carousel-tab flex-1 px-4 py-3 text-sm font-medium text-center border-b-2 border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300" data-tab="rent">
            <Icon name="home" size="sm" class="inline mr-2" />
            Rent Alternative
          </button>
          <button class="carousel-tab flex-1 px-4 py-3 text-sm font-medium text-center border-b-2 border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300" data-tab="bitcoin">
            <Icon name="bitcoin" size="sm" class="inline mr-2" />
            Bitcoin & Market
          </button>
          <button class="carousel-tab flex-1 px-4 py-3 text-sm font-medium text-center border-b-2 border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300" data-tab="location">
            <Icon name="location" size="sm" class="inline mr-2" />
            Location Presets
          </button>
        </div>

        <!-- Carousel Content -->
        <div class="p-6">
          <!-- Home Purchase Tab -->
          <div id="tab-home" class="carousel-content">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Purchase Price</label>
                <input id="home-price" type="number" class="input w-full" value="420000" />
                <p class="text-xs text-gray-500 mt-1">Total home purchase price</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Down Payment %</label>
                <input id="down-pct" type="number" class="input w-full" value="20" min="0" max="100" />
                <p class="text-xs text-gray-500 mt-1">Higher down payment = less leverage, more cash in BTC</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Mortgage Rate %</label>
                <input id="rate" type="number" class="input w-full" value="7.0" step="0.1" />
                <p class="text-xs text-gray-500 mt-1">Current 30-year fixed rate</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Mortgage Term (years)</label>
                <select id="term" class="input w-full">
                  <option value="15">15 years</option>
                  <option value="30" selected>30 years</option>
                </select>
                <p class="text-xs text-gray-500 mt-1">Loan duration affects monthly payment</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Property Tax %</label>
                <input id="tax-rate" type="number" class="input w-full" value="1.2" step="0.1" />
                <p class="text-xs text-gray-500 mt-1">Annual property tax rate</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Insurance $/year</label>
                <input id="insurance" type="number" class="input w-full" value="1500" />
                <p class="text-xs text-gray-500 mt-1">Homeowner's insurance cost</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">HOA $/year</label>
                <input id="hoa" type="number" class="input w-full" value="0" />
                <p class="text-xs text-gray-500 mt-1">Homeowner association fees</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Home Appreciation %</label>
                <input id="appreciation" type="number" class="input w-full" value="3" step="0.1" />
                <p class="text-xs text-gray-500 mt-1">Annual home value growth rate</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Maintenance %</label>
                <input id="maintenance" type="number" class="input w-full" value="1" step="0.1" />
                <p class="text-xs text-gray-500 mt-1">Annual maintenance as % of home value</p>
              </div>
            </div>
          </div>

          <!-- Rent Alternative Tab -->
          <div id="tab-rent" class="carousel-content hidden">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Monthly Rent</label>
                <input id="rent" type="number" class="input w-full" value="2500" />
                <p class="text-xs text-gray-500 mt-1">Current monthly rent payment</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Annual Rent Growth %</label>
                <input id="rent-growth" type="number" class="input w-full" value="3" step="0.5" />
                <p class="text-xs text-gray-500 mt-1">Expected yearly rent increases</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Security Deposit (months)</label>
                <input id="security-deposit" type="number" class="input w-full" value="2" step="0.5" />
                <p class="text-xs text-gray-500 mt-1">Upfront security deposit in months of rent</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Moving Costs $/year</label>
                <input id="moving-costs" type="number" class="input w-full" value="2000" />
                <p class="text-xs text-gray-500 mt-1">Average annual moving/relocation costs</p>
              </div>
            </div>
          </div>

          <!-- Bitcoin & Market Tab -->
          <div id="tab-bitcoin" class="carousel-content hidden">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Cost Basis $/BTC</label>
                <input id="cost-basis" type="number" class="input w-full" value="0" />
                <p class="text-xs text-gray-500 mt-1">Your average purchase price (optional)</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">DCA Amount $/month</label>
                <input id="dca-amount" type="number" class="input w-full" value="0" />
                <p class="text-xs text-gray-500 mt-1">Monthly dollar-cost averaging</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Tax Rate on Gains %</label>
                <input id="tax-rate-btc" type="number" class="input w-full" value="20" />
                <p class="text-xs text-gray-500 mt-1">Capital gains tax rate</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Inflation Rate %</label>
                <input id="inflation" type="number" class="input w-full" value="3" step="0.1" />
                <p class="text-xs text-gray-500 mt-1">Expected annual inflation</p>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Stock Market Return %</label>
                <input id="stock-return" type="number" class="input w-full" value="7" step="0.1" />
                <p class="text-xs text-gray-500 mt-1">Alternative investment benchmark</p>
              </div>
            </div>
          </div>

          <!-- Location Presets Tab -->
          <div id="tab-location" class="carousel-content hidden">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <button class="location-preset p-4 border border-gray-300 dark:border-gray-600 rounded-lg hover:border-bitcoin-500 transition" data-location="california">
                <h4 class="font-semibold text-gray-900 dark:text-white">California</h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">Tax: 1.1% • Insurance: $2,200 • Rent: $3,500</p>
              </button>
              <button class="location-preset p-4 border border-gray-300 dark:border-gray-600 rounded-lg hover:border-bitcoin-500 transition" data-location="texas">
                <h4 class="font-semibold text-gray-900 dark:text-white">Texas</h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">Tax: 1.8% • Insurance: $1,800 • Rent: $2,200</p>
              </button>
              <button class="location-preset p-4 border border-gray-300 dark:border-gray-600 rounded-lg hover:border-bitcoin-500 transition" data-location="florida">
                <h4 class="font-semibold text-gray-900 dark:text-white">Florida</h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">Tax: 0.9% • Insurance: $2,500 • Rent: $2,800</p>
              </button>
              <button class="location-preset p-4 border border-gray-300 dark:border-gray-600 rounded-lg hover:border-bitcoin-500 transition" data-location="newyork">
                <h4 class="font-semibold text-gray-900 dark:text-white">New York</h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">Tax: 1.4% • Insurance: $1,200 • Rent: $4,200</p>
              </button>
              <button class="location-preset p-4 border border-gray-300 dark:border-gray-600 rounded-lg hover:border-bitcoin-500 transition" data-location="national">
                <h4 class="font-semibold text-gray-900 dark:text-white">National Average</h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">Tax: 1.2% • Insurance: $1,500 • Rent: $2,500</p>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- KPIs -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4 mb-6">
        <!-- Hold All Bitcoin KPI -->
        <div class="glass p-4 rounded-xl border border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-bitcoin-500 rounded"></div>
              <span class="text-sm font-medium text-bitcoin-700 dark:text-bitcoin-300">Hold All Bitcoin</span>
              <button class="p-1 text-gray-400 hover:text-bitcoin-500" data-tooltip="Keep all Bitcoin, never buy house">
                <Icon name="info" size="sm" />
              </button>
            </div>
            <div class="text-right">
              <div id="kpi-hodl" class="text-xl font-bold text-bitcoin-600 dark:text-bitcoin-400">$1.2M</div>
              <div class="text-xs text-gray-500">Full stack value</div>
            </div>
          </div>
        </div>

        <!-- Buy House at Timing KPI -->
        <div class="glass p-4 rounded-xl border border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-green-500 rounded"></div>
              <span class="text-sm font-medium text-green-700 dark:text-green-300">Buy House <span id="timing-label">Now</span></span>
              <button class="p-1 text-gray-400 hover:text-green-500" data-tooltip="Spend BTC on house at selected timing">
                <Icon name="info" size="sm" />
              </button>
            </div>
            <div class="text-right">
              <div id="kpi-buy" class="text-xl font-bold text-green-600 dark:text-green-400">$680K</div>
              <div class="text-xs text-gray-500">House + remaining BTC</div>
            </div>
          </div>
        </div>

        <!-- Rent Forever KPI -->
        <div class="glass p-4 rounded-xl border border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-blue-500 rounded"></div>
              <span class="text-sm font-medium text-blue-700 dark:text-blue-300">Rent Forever</span>
              <button class="p-1 text-gray-400 hover:text-blue-500" data-tooltip="Keep all Bitcoin, pay rent from other income">
                <Icon name="info" size="sm" />
              </button>
            </div>
            <div class="text-right">
              <div id="kpi-rent" class="text-xl font-bold text-blue-600 dark:text-blue-400">$1.1M</div>
              <div class="text-xs text-gray-500">BTC value - rent costs</div>
            </div>
          </div>
        </div>

        <!-- Opportunity Cost KPI -->
        <div class="glass p-4 rounded-xl border border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-red-500 rounded"></div>
              <span class="text-sm font-medium text-red-700 dark:text-red-300">Lost Opportunity</span>
              <button class="p-1 text-gray-400 hover:text-red-500" data-tooltip="What you give up by not choosing the optimal strategy">
                <Icon name="info" size="sm" />
              </button>
            </div>
            <div class="text-right">
              <div id="kpi-opportunity" class="text-xl font-bold text-red-600 dark:text-red-400">-$320K</div>
              <div class="text-xs text-gray-500">vs best strategy</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Advanced Chart Section -->
      <div class="glass rounded-2xl border border-gray-200 dark:border-gray-700 mb-6 overflow-hidden">
        <!-- Chart Header with Controls -->
        <div class="flex flex-col md:flex-row md:items-center md:justify-between p-4 md:p-6 border-b border-gray-200 dark:border-gray-800">
          <div class="flex items-center gap-2 mb-3 md:mb-0">
            <Icon name="chart" size="md" class="text-bitcoin-500" />
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Wealth Projection</h3>
            <button class="p-1 text-gray-400 hover:text-bitcoin-500" data-tooltip="Compare your three strategies over time using research-based Bitcoin models">
              <Icon name="info" size="sm" />
            </button>
          </div>
          <div class="flex items-center gap-3">
            <!-- Chart View Toggle -->
            <div class="flex items-center gap-2">
              <span class="text-xs text-gray-500">View:</span>
              <div class="inline-flex rounded-lg overflow-hidden border border-gray-300 dark:border-gray-700">
                <button id="view-absolute" class="px-3 py-1 text-xs bg-bitcoin-500 text-white">Absolute</button>
                <button id="view-relative" class="px-3 py-1 text-xs text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800">vs Hold BTC</button>
                <button id="view-percentage" class="px-3 py-1 text-xs text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800">% Change</button>
              </div>
            </div>
            <!-- Series Toggles -->
            <div class="flex items-center gap-2">
              <span class="text-xs text-gray-500">Show:</span>
              <button id="toggle-hodl" class="flex items-center gap-1 px-2 py-1 text-xs bg-bitcoin-100 dark:bg-bitcoin-900 text-bitcoin-700 dark:text-bitcoin-300 rounded">
                <div class="w-2 h-2 bg-bitcoin-500 rounded"></div>
                Hold
              </button>
              <button id="toggle-buy" class="flex items-center gap-1 px-2 py-1 text-xs bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 rounded">
                <div class="w-2 h-2 bg-green-500 rounded"></div>
                Buy
              </button>
              <button id="toggle-rent" class="flex items-center gap-1 px-2 py-1 text-xs bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded">
                <div class="w-2 h-2 bg-blue-500 rounded"></div>
                Rent
              </button>
              <button id="toggle-opportunity" class="flex items-center gap-1 px-2 py-1 text-xs bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300 rounded">
                <div class="w-2 h-2 bg-red-500 rounded"></div>
                Lost
              </button>
            </div>
          </div>
        </div>

        <!-- Chart Canvas -->
        <div class="relative p-4 md:p-6">
          <canvas id="projection-chart" class="w-full" style="height: 400px;"></canvas>
          <!-- Chart Overlay Info -->
          <div id="chart-crosshair" class="absolute hidden bg-white dark:bg-gray-800 p-3 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 pointer-events-none z-10">
            <div class="text-sm font-semibold text-gray-900 dark:text-white mb-2" id="crosshair-year"></div>
            <div class="space-y-1" id="crosshair-values"></div>
          </div>
        </div>
      </div>

      <!-- Advanced Insights Section -->
      <div class="glass rounded-2xl border border-gray-200 dark:border-gray-700 overflow-hidden">
        <!-- Insights Header -->
        <div class="flex items-center justify-between p-4 md:p-6 border-b border-gray-200 dark:border-gray-800">
          <div class="flex items-center gap-2">
            <Icon name="compare" size="md" class="text-bitcoin-500" />
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Strategic Analysis</h3>
            <button class="p-1 text-gray-400 hover:text-bitcoin-500" data-tooltip="AI-powered insights based on your specific inputs and market assumptions">
              <Icon name="info" size="sm" />
            </button>
          </div>
          <div class="text-xs text-gray-500">Based on <span id="insight-model">Power Law</span> • <span id="insight-years">10</span> years</div>
        </div>

        <!-- Insights Content -->
        <div class="p-4 md:p-6 space-y-6">
          <!-- Key Metrics Grid -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="text-center p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
              <div class="text-xs text-gray-500 mb-1">Best Strategy</div>
              <div id="best-strategy" class="text-lg font-bold text-bitcoin-600 dark:text-bitcoin-400">Hold Bitcoin</div>
              <div id="best-advantage" class="text-xs text-gray-600 dark:text-gray-400">+$320K advantage</div>
            </div>
            <div class="text-center p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
              <div class="text-xs text-gray-500 mb-1">Break-Even Point</div>
              <div id="breakeven-point" class="text-lg font-bold text-gray-900 dark:text-white">Year 7</div>
              <div id="breakeven-desc" class="text-xs text-gray-600 dark:text-gray-400">Buy vs Hold</div>
            </div>
            <div class="text-center p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
              <div class="text-xs text-gray-500 mb-1">Risk Level</div>
              <div id="risk-level" class="text-lg font-bold text-orange-600 dark:text-orange-400">Moderate</div>
              <div id="risk-desc" class="text-xs text-gray-600 dark:text-gray-400">BTC volatility</div>
            </div>
          </div>

          <!-- Detailed Analysis -->
          <div class="space-y-4">
            <h4 class="font-semibold text-gray-900 dark:text-white">Key Insights</h4>
            <ul id="insights-list" class="space-y-3"></ul>
          </div>

          <!-- Scenario Comparison Table -->
          <div class="space-y-4">
            <h4 class="font-semibold text-gray-900 dark:text-white">Scenario Comparison</h4>
            <div class="overflow-x-auto">
              <table class="w-full text-sm">
                <thead>
                  <tr class="border-b border-gray-200 dark:border-gray-700">
                    <th class="text-left py-2 text-gray-600 dark:text-gray-400">Strategy</th>
                    <th class="text-right py-2 text-gray-600 dark:text-gray-400">Initial Cost</th>
                    <th class="text-right py-2 text-gray-600 dark:text-gray-400">Monthly Cost</th>
                    <th class="text-right py-2 text-gray-600 dark:text-gray-400">Final Value</th>
                    <th class="text-right py-2 text-gray-600 dark:text-gray-400">ROI</th>
                  </tr>
                </thead>
                <tbody id="comparison-table" class="divide-y divide-gray-200 dark:divide-gray-700">
                </tbody>
              </table>
            </div>
          </div>

          <!-- Assumptions Summary -->
          <div class="space-y-4">
            <h4 class="font-semibold text-gray-900 dark:text-white">Key Assumptions</h4>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-3 text-xs">
              <div class="p-2 bg-gray-50 dark:bg-gray-800/50 rounded">
                <div class="text-gray-500">Down Payment</div>
                <div id="assumption-down" class="font-semibold">20%</div>
              </div>
              <div class="p-2 bg-gray-50 dark:bg-gray-800/50 rounded">
                <div class="text-gray-500">Mortgage Rate</div>
                <div id="assumption-rate" class="font-semibold">7.0%</div>
              </div>
              <div class="p-2 bg-gray-50 dark:bg-gray-800/50 rounded">
                <div class="text-gray-500">Home Appreciation</div>
                <div id="assumption-appreciation" class="font-semibold">3.0%</div>
              </div>
              <div class="p-2 bg-gray-50 dark:bg-gray-800/50 rounded">
                <div class="text-gray-500">Monthly Rent</div>
                <div id="assumption-rent" class="font-semibold">$2,500</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Footer with Financial Disclaimer -->
  <footer class="border-t border-gray-200 dark:border-gray-800 bg-gray-50 dark:bg-gray-900/50">
    <div class="container-pro py-8 md:py-12">
      <!-- Main Footer Content -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
        <!-- Brand & Description -->
        <div class="md:col-span-2">
          <div class="flex items-center space-x-3 mb-4">
            <div class="w-8 h-8 bg-gradient-to-br from-bitcoin-500 to-bitcoin-600 rounded-lg flex items-center justify-center">
              <Icon name="bitcoin" size="sm" class="text-white" />
            </div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">BTCHome</h3>
          </div>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-4 max-w-md">
            Educational tool for comparing Bitcoin investment strategies against real estate decisions.
            Make informed choices with research-based projections and comprehensive analysis.
          </p>
          <div class="flex items-center space-x-4">
            <a href="https://github.com" class="text-gray-500 hover:text-bitcoin-500 transition-colors">
              <Icon name="settings" size="sm" />
            </a>
            <a href="https://twitter.com" class="text-gray-500 hover:text-bitcoin-500 transition-colors">
              <Icon name="info" size="sm" />
            </a>
          </div>
        </div>

        <!-- Resources -->
        <div>
          <h4 class="font-semibold text-gray-900 dark:text-white mb-3">Resources</h4>
          <ul class="space-y-2 text-sm">
            <li><a href="#" class="text-gray-600 dark:text-gray-400 hover:text-bitcoin-500 transition-colors">Model Documentation</a></li>
            <li><a href="#" class="text-gray-600 dark:text-gray-400 hover:text-bitcoin-500 transition-colors">Research Sources</a></li>
            <li><a href="#" class="text-gray-600 dark:text-gray-400 hover:text-bitcoin-500 transition-colors">Methodology</a></li>
            <li><a href="#" class="text-gray-600 dark:text-gray-400 hover:text-bitcoin-500 transition-colors">FAQ</a></li>
          </ul>
        </div>

        <!-- Legal -->
        <div>
          <h4 class="font-semibold text-gray-900 dark:text-white mb-3">Legal</h4>
          <ul class="space-y-2 text-sm">
            <li><a href="#" class="text-gray-600 dark:text-gray-400 hover:text-bitcoin-500 transition-colors">Privacy Policy</a></li>
            <li><a href="#" class="text-gray-600 dark:text-gray-400 hover:text-bitcoin-500 transition-colors">Terms of Service</a></li>
            <li><a href="#" class="text-gray-600 dark:text-gray-400 hover:text-bitcoin-500 transition-colors">Disclaimer</a></li>
            <li><a href="#" class="text-gray-600 dark:text-gray-400 hover:text-bitcoin-500 transition-colors">Contact</a></li>
          </ul>
        </div>
      </div>

      <!-- Financial Disclaimer -->
      <div class="border-t border-gray-200 dark:border-gray-700 pt-6">
        <div class="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-xl p-4 mb-6">
          <div class="flex items-start gap-3">
            <Icon name="warning" size="sm" class="text-amber-600 dark:text-amber-400 mt-0.5 flex-shrink-0" />
            <div>
              <h5 class="font-semibold text-amber-800 dark:text-amber-200 mb-2">Financial Disclaimer</h5>
              <div class="text-sm text-amber-700 dark:text-amber-300">
                <p>
                  <strong>Educational tool only.</strong> Not financial advice. Bitcoin is volatile - you may lose money.
                  Projections are simplified models, not guarantees. Consult professionals before investing.
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- Copyright & Attribution -->
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 text-sm text-gray-500 dark:text-gray-400">
          <div class="flex items-center gap-4">
            <p>&copy; 2024 BTCHome. Educational tool for comparison purposes only.</p>
            <span class="hidden md:inline">•</span>
            <p class="text-xs">Built with research-based Bitcoin projection models</p>
          </div>
          <div class="flex items-center gap-4 text-xs">
            <span>Data sources: CoinGecko, Federal Reserve, Census Bureau</span>
            <span>•</span>
            <span>Last updated: <span id="last-updated">Loading...</span></span>
          </div>
        </div>
      </div>
    </div>
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.6/dist/chart.umd.js"></script>
  <script>
    // Clean separation: Bitcoin price models
    function getBitcoinPrice(model, years, currentPrice) {
      // Validate inputs
      if (!years || years < 0 || !currentPrice || currentPrice <= 0) {
        console.error('Invalid inputs to getBitcoinPrice:', { model, years, currentPrice });
        return currentPrice;
      }

      const models = {
        'saylor': (y, price) => {
          const energyGrowth = Math.pow(1.15, y);
          const networkGrowth = Math.pow(1.25, y);
          const scarcityPremium = Math.pow(1.20, y);
          const multiplier = energyGrowth * Math.sqrt(networkGrowth) * scarcityPremium;
          const diminishing = y > 10 ? Math.pow(0.98, y - 10) : 1;
          return price * multiplier * diminishing;
        },
        'power-law': (y, price) => {
          const genesisDate = new Date('2009-01-03');
          const currentDays = (Date.now() - genesisDate.getTime()) / (1000 * 60 * 60 * 24);
          const futureDays = currentDays + (y * 365.25);
          const n = 5.8;
          const A = price / Math.pow(currentDays, n);
          const result = A * Math.pow(futureDays, n);
          return Math.min(result, price * 1000); // Cap at 1000x
        },
        'log-regression': (y, price) => {
          const genesisDate = new Date('2009-01-03');
          const currentDays = (Date.now() - genesisDate.getTime()) / (1000 * 60 * 60 * 24);
          const futureDays = currentDays + (y * 365.25);
          const a = 2.9;
          const b = Math.log10(price) - a * Math.log10(currentDays);
          return Math.pow(10, a * Math.log10(futureDays) + b);
        },
        's2f': (y, price) => {
          const currentS2F = 56;
          const halvings = Math.floor(y / 4);
          const futureS2F = currentS2F * Math.pow(2, halvings);
          const k = 3.3;
          const c = Math.log(price) - k * Math.log(currentS2F);
          return Math.exp(k * Math.log(futureS2F) + c);
        },
        'metcalfe': (y, price) => {
          const networkGrowth = Math.pow(1.20, y);
          const valueMultiplier = Math.pow(networkGrowth, 2);
          return price * valueMultiplier * Math.pow(0.95, y);
        },
        'rainbow': (y, price) => {
          const genesisDate = new Date('2009-01-03');
          const currentDays = (Date.now() - genesisDate.getTime()) / (1000 * 60 * 60 * 24);
          const futureDays = currentDays + (y * 365.25);
          const logPrice = 2.52 * Math.log10(futureDays) - 17.01;
          const calibration = price / Math.pow(10, 2.52 * Math.log10(currentDays) - 17.01);
          return Math.pow(10, logPrice) * calibration;
        },
        'plan-b': (y, price) => {
          const monthsFromGenesis = ((Date.now() - new Date('2009-01-03').getTime()) / (1000 * 60 * 60 * 24 * 30.44)) + (y * 12);
          const s2f = 25.8 * Math.pow(monthsFromGenesis / 12, 0.18);
          return Math.exp(-1.84 + 3.36 * Math.log(s2f));
        }
      };

      const modelFn = models[model] || models['saylor'];
      const result = modelFn(years, currentPrice);

      // Validate output
      if (!isFinite(result) || result <= 0) {
        console.error('Invalid model output:', { model, years, currentPrice, result });
        return currentPrice * Math.pow(1.12, years); // Fallback to 12% growth
      }

      return result;
    }

    // Clean separation: Financial calculations
    function calculateMortgage(principal, rate, years) {
      if (!principal || !rate || !years || principal <= 0 || rate < 0 || years <= 0) {
        console.error('Invalid mortgage inputs:', { principal, rate, years });
        return { monthlyPayment: 0, totalPayments: 0 };
      }

      const monthlyRate = rate / 12;
      const numPayments = years * 12;

      if (rate === 0) {
        return {
          monthlyPayment: principal / numPayments,
          totalPayments: principal
        };
      }

      const monthlyPayment = principal * (monthlyRate * Math.pow(1 + monthlyRate, numPayments)) / (Math.pow(1 + monthlyRate, numPayments) - 1);

      return {
        monthlyPayment: monthlyPayment,
        totalPayments: monthlyPayment * numPayments
      };
    }

    // Clean separation: Scenario analysis
    function runTimingAnalysis(inputs) {
      const {
        btcAmount, btcPrice, timeframeYears, model, purchaseTiming,
        downPaymentPct, interestRate, mortgageYears,
        appreciationRate, homePrice, rentAnnual
      } = inputs;

      // Validate all inputs
      if (!btcAmount || !btcPrice || !timeframeYears || btcAmount <= 0 || btcPrice <= 0 || timeframeYears <= 0) {
        console.error('Invalid scenario inputs:', inputs);
        return {
          holdAllValue: 0,
          buyHouseValue: 0,
          rentForeverValue: 0,
          error: 'Invalid inputs'
        };
      }

      // Parse purchase timing
      const timingMap = {
        'now': 0, 'year-1': 1, 'year-2': 2, 'year-3': 3, 'year-5': 5
      };
      const purchaseYear = timingMap[purchaseTiming] || 0;

      // Scenario 1: Hold all Bitcoin (baseline)
      const finalBtcPrice = getBitcoinPrice(model, timeframeYears, btcPrice);
      const holdAllValue = btcAmount * finalBtcPrice;

      // Scenario 2: Buy house at specific timing
      const purchaseBtcPrice = getBitcoinPrice(model, purchaseYear, btcPrice);
      const requiredDownPayment = homePrice * downPaymentPct;
      const btcNeededForDown = requiredDownPayment / purchaseBtcPrice;

      // Check if we have enough BTC at purchase time
      if (btcNeededForDown > btcAmount) {
        return {
          holdAllValue,
          buyHouseValue: 0,
          rentForeverValue: holdAllValue - (rentAnnual * timeframeYears),
          opportunityCosts: { holdAll: 0, buyHouse: holdAllValue, rentForever: 0 },
          error: 'Insufficient Bitcoin for down payment',
          btcSpent: btcNeededForDown,
          btcRemaining: 0
        };
      }

      const btcRemaining = btcAmount - btcNeededForDown;
      const yearsOfOwnership = Math.max(0, timeframeYears - purchaseYear);

      // Calculate house value at end
      const futureHomeValue = homePrice * Math.pow(1 + appreciationRate, yearsOfOwnership);

      // Calculate mortgage details
      const loanAmount = homePrice - requiredDownPayment;
      const mortgage = calculateMortgage(loanAmount, interestRate, mortgageYears);

      // Calculate remaining mortgage balance after ownership period
      const paymentsRemaining = Math.max(0, (mortgageYears * 12) - (yearsOfOwnership * 12));
      let remainingBalance = 0;

      if (paymentsRemaining > 0 && yearsOfOwnership > 0) {
        const monthlyRate = interestRate / 12;
        const paymentsMade = yearsOfOwnership * 12;
        remainingBalance = loanAmount * Math.pow(1 + monthlyRate, paymentsMade) -
          mortgage.monthlyPayment * ((Math.pow(1 + monthlyRate, paymentsMade) - 1) / monthlyRate);
        remainingBalance = Math.max(0, remainingBalance);
      }

      const homeEquity = Math.max(0, futureHomeValue - remainingBalance);

      // Value of remaining Bitcoin at end
      const remainingBtcValue = btcRemaining * finalBtcPrice;

      // Total wealth from buying house
      const buyHouseValue = homeEquity + remainingBtcValue;

      // Scenario 3: Rent forever + keep all Bitcoin
      const totalRentPaid = rentAnnual * timeframeYears;
      const rentForeverValue = holdAllValue - totalRentPaid;

      // Calculate opportunity costs for each strategy
      const allValues = [holdAllValue, buyHouseValue, rentForeverValue].filter(v => isFinite(v) && v > 0);
      const maxValue = Math.max(...allValues);

      const opportunityCosts = {
        holdAll: maxValue - holdAllValue,
        buyHouse: maxValue - buyHouseValue,
        rentForever: maxValue - rentForeverValue
      };

      return {
        holdAllValue: holdAllValue || 0,
        buyHouseValue: buyHouseValue || 0,
        rentForeverValue: rentForeverValue || 0,
        opportunityCosts,
        maxValue,
        btcSpent: btcNeededForDown || 0,
        btcRemaining: btcRemaining || 0,
        purchaseBtcPrice: purchaseBtcPrice || btcPrice,
        homeEquity: homeEquity || 0,
        remainingBtcValue: remainingBtcValue || 0,
        monthlyPayment: mortgage.monthlyPayment || 0,
        monthlyRent: (rentAnnual || 0) / 12,
        yearsOfOwnership: yearsOfOwnership || 0
      };
    }
    // State
    let btcPrice = 67000;
    let btcAmount = 1.5;
    let model = 'saylor';
    let years = 10;
    let purchaseTiming = 'now';
    let prefs = {
      homePrice: 420000,
      downPct: 0.20,
      rate: 0.07,
      term: 30,
      taxRate: 0.012,
      insurance: 1500,
      hoa: 0,
      appreciation: 0.03,
      maintenance: 0.01,
      rent: 2500,
      rentGrowth: 0.03,
      securityDeposit: 2,
      movingCosts: 2000,
      costBasis: 0,
      dcaAmount: 0,
      taxRateBtc: 0.20,
      inflation: 0.03,
      stockReturn: 0.07
    };

    function formatCurrency(amount) {
      const abs = Math.abs(amount);
      const sign = amount < 0 ? '-' : '';
      if (abs >= 1e9) return sign + '$' + (abs/1e9).toFixed(1) + 'B';
      if (abs >= 1e6) return sign + '$' + (abs/1e6).toFixed(1) + 'M';
      if (abs >= 1e3) return sign + '$' + (abs/1e3).toFixed(0) + 'K';
      return sign + '$' + abs.toLocaleString();
    }

    function compute(yearsOverride = years) {
      const inputs = {
        btcAmount, btcPrice, timeframeYears: yearsOverride, model, purchaseTiming,
        downPaymentPct: prefs.downPct,
        interestRate: prefs.rate,
        mortgageYears: prefs.term,
        propertyTaxRate: prefs.taxRate,
        insuranceAnnual: prefs.insurance,
        appreciationRate: prefs.appreciation,
        homePrice: prefs.homePrice
      };
      return runTimingAnalysis(inputs);
    }

    // Chart state
    let chartView = 'absolute'; // 'absolute', 'relative', 'percentage'
    let visibleSeries = { hodl: true, buy: true, rent: true, opportunity: true };

    function updateAll() {
      const res = compute();

      // Validate results
      if (!res || res.error) {
        console.error('Computation error:', res?.error);
        return;
      }

      // Update KPIs with validation
      const hodlEl = document.getElementById('kpi-hodl');
      const buyEl = document.getElementById('kpi-buy');
      const rentEl = document.getElementById('kpi-rent');
      const oppEl = document.getElementById('kpi-opportunity');

      if (hodlEl) hodlEl.textContent = formatCurrency(res.holdAllValue || 0);
      if (buyEl) buyEl.textContent = formatCurrency(res.buyHouseValue || 0);
      if (rentEl) rentEl.textContent = formatCurrency(res.rentForeverValue || 0);

      // Calculate and display worst strategy's opportunity cost
      const worstStrategy = getCurrentWorstStrategy(res);
      const worstOpportunityCost = res.opportunityCosts[worstStrategy] || 0;
      if (oppEl) oppEl.textContent = formatCurrency(-worstOpportunityCost);

      // Update timing label
      const timingLabels = {
        'now': 'Now', 'year-1': 'Year 1', 'year-2': 'Year 2',
        'year-3': 'Year 3', 'year-5': 'Year 5'
      };
      const timingEl = document.getElementById('timing-label');
      if (timingEl) timingEl.textContent = timingLabels[purchaseTiming] || 'Now';

      updateChart();
      updateInsights(res);
    }

    function getCurrentWorstStrategy(res) {
      const strategies = [
        { name: 'holdAll', value: res.holdAllValue || 0 },
        { name: 'buyHouse', value: res.buyHouseValue || 0 },
        { name: 'rentForever', value: res.rentForeverValue || 0 }
      ];

      // Filter out invalid values
      const validStrategies = strategies.filter(s => isFinite(s.value) && s.value > 0);
      if (validStrategies.length === 0) return 'holdAll';

      validStrategies.sort((a, b) => a.value - b.value);
      return validStrategies[0].name; // Return worst performing strategy
    }

    function updateInsights(res) {
      // Calculate key metrics
      const values = [
        { name: 'Hold All Bitcoin', value: res.holdAllValue, color: 'bitcoin' },
        { name: 'Buy House', value: res.buyHouseValue, color: 'green' },
        { name: 'Rent + Invest', value: res.rentInvestValue, color: 'blue' }
      ];
      values.sort((a, b) => b.value - a.value);

      const best = values[0];
      const advantage = best.value - values[1].value;

      // Update key metrics
      document.getElementById('best-strategy').textContent = best.name;
      document.getElementById('best-advantage').textContent = `+${formatCurrency(advantage)} advantage`;
      document.getElementById('insight-model').textContent = model;
      document.getElementById('insight-years').textContent = years;

      // Generate detailed insights
      const insights = generateInsights(res);
      document.getElementById('insights-list').innerHTML = insights.map(i =>
        `<li class="flex items-start gap-2"><div class="w-1.5 h-1.5 bg-bitcoin-500 rounded-full mt-2 flex-shrink-0"></div><span>${i}</span></li>`
      ).join('');

      // Update comparison table
      updateComparisonTable(res);

      // Update assumptions
      document.getElementById('assumption-down').textContent = `${(prefs.downPct * 100).toFixed(0)}%`;
      document.getElementById('assumption-rate').textContent = `${(prefs.rate * 100).toFixed(1)}%`;
      document.getElementById('assumption-appreciation').textContent = `${(prefs.appreciation * 100).toFixed(1)}%`;
      document.getElementById('assumption-rent').textContent = formatCurrency(prefs.rent);
    }

    function generateInsights(res) {
      const insights = [];
      const timingLabels = {
        'now': 'immediately', 'year-1': 'in year 1', 'year-2': 'in year 2',
        'year-3': 'in year 3', 'year-5': 'in year 5'
      };
      const timing = timingLabels[purchaseTiming] || 'now';

      // Strategy comparison
      const strategies = [
        { name: 'Hold All Bitcoin', value: res.holdAllValue },
        { name: 'Buy House', value: res.buyHouseValue },
        { name: 'Rent + Invest', value: res.rentInvestValue }
      ].sort((a, b) => b.value - a.value);

      const best = strategies[0];
      const worst = strategies[2];
      const advantage = best.value - worst.value;

      insights.push(`${best.name} is the optimal strategy, outperforming ${worst.name} by ${formatCurrency(advantage)} over ${years} years.`);

      // Bitcoin efficiency for house purchase
      if (res.btcSpent) {
        insights.push(`Buying ${timing} requires ${res.btcSpent.toFixed(3)} BTC for down payment, leaving ${res.btcRemaining.toFixed(3)} BTC to appreciate.`);
      }

      // Rent + invest analysis
      if (res.mortgagePaymentDifference > 0) {
        insights.push(`Renting saves ${formatCurrency(res.mortgagePaymentDifference)}/month vs mortgage payment, which can be invested in Bitcoin.`);
      } else if (res.monthlyRent > res.monthlyPayment) {
        insights.push(`Mortgage payment (${formatCurrency(res.monthlyPayment)}) is lower than rent (${formatCurrency(res.monthlyRent)}), favoring ownership.`);
      }

      // Model context
      insights.push(`Under ${model} model, Bitcoin could reach ${formatCurrency(res.purchaseBtcPrice || getBtcPrice(years))} per coin ${timing}.`);

      // Risk consideration
      if (res.holdAllValue > res.buyHouseValue * 1.5) {
        insights.push(`Bitcoin strategy shows high upside but carries volatility risk vs real estate stability.`);
      }

      return insights;
    }

    function updateComparisonTable(res) {
      const initialBtcValue = btcAmount * btcPrice;
      const downPayment = initialBtcValue * prefs.downPct;

      const rows = [
        {
          strategy: 'Hold Bitcoin',
          initial: formatCurrency(0),
          monthly: formatCurrency(0),
          final: formatCurrency(res.futureBtcValue),
          roi: `${(((res.futureBtcValue / initialBtcValue) - 1) * 100).toFixed(0)}%`
        },
        {
          strategy: 'Buy House',
          initial: formatCurrency(downPayment),
          monthly: formatCurrency(res.monthlyMortgage),
          final: formatCurrency(res.buyHouseEquity),
          roi: `${(((res.buyHouseEquity / downPayment) - 1) * 100).toFixed(0)}%`
        },
        {
          strategy: 'Rent + Stack',
          initial: formatCurrency(0),
          monthly: formatCurrency(prefs.rent),
          final: formatCurrency(res.rentPlusBtcNet),
          roi: `${(((res.rentPlusBtcNet / initialBtcValue) - 1) * 100).toFixed(0)}%`
        }
      ];

      document.getElementById('comparison-table').innerHTML = rows.map(row => `
        <tr>
          <td class="py-2 font-medium">${row.strategy}</td>
          <td class="py-2 text-right">${row.initial}</td>
          <td class="py-2 text-right">${row.monthly}</td>
          <td class="py-2 text-right font-semibold">${row.final}</td>
          <td class="py-2 text-right">${row.roi}</td>
        </tr>
      `).join('');
    }

    let chart;
    function updateChart() {
      const currentYear = new Date().getFullYear();
      const labels = Array.from({length: years + 1}, (_, i) => currentYear + i);
      const yearIndices = Array.from({length: years + 1}, (_, i) => i);

      // Get data for each year with validation
      const hodlData = yearIndices.map(y => {
        const res = compute(y);
        return res && isFinite(res.holdAllValue) ? res.holdAllValue : 0;
      });

      const buyData = yearIndices.map(y => {
        const res = compute(y);
        return res && isFinite(res.buyHouseValue) ? res.buyHouseValue : 0;
      });

      const rentData = yearIndices.map(y => {
        const res = compute(y);
        return res && isFinite(res.rentForeverValue) ? res.rentForeverValue : 0;
      });

      // Calculate opportunity cost data (lost gains from not choosing optimal)
      const opportunityData = yearIndices.map(y => {
        const res = compute(y);
        if (!res || res.error) return 0;

        const values = [res.holdAllValue, res.buyHouseValue, res.rentForeverValue].filter(v => isFinite(v));
        if (values.length === 0) return 0;

        const maxValue = Math.max(...values);
        const minValue = Math.min(...values);
        return -(maxValue - minValue); // Negative to show as loss
      });

      // Transform data based on view mode
      let transformedData = { hodl: hodlData, buy: buyData, rent: rentData, opportunity: opportunityData };
      if (chartView === 'relative') {
        transformedData.buy = buyData.map((v, i) => v - hodlData[i]);
        transformedData.rent = rentData.map((v, i) => v - hodlData[i]);
        transformedData.hodl = hodlData.map(() => 0); // Baseline
        transformedData.opportunity = opportunityData; // Keep as absolute loss
      } else if (chartView === 'percentage') {
        const initial = {
          hodl: hodlData[0] || 1,
          buy: buyData[0] || 1,
          rent: rentData[0] || 1
        };
        transformedData.hodl = hodlData.map(v => ((v / initial.hodl) - 1) * 100);
        transformedData.buy = buyData.map(v => ((v / initial.buy) - 1) * 100);
        transformedData.rent = rentData.map(v => ((v / initial.rent) - 1) * 100);
        transformedData.opportunity = opportunityData.map(v => (v / initial.hodl) * 100);
      }

      const datasets = [
        {
          label: 'Hold All Bitcoin',
          data: transformedData.hodl,
          borderColor: '#ed7611',
          backgroundColor: 'rgba(237, 118, 17, 0.1)',
          hidden: !visibleSeries.hodl,
          tension: 0.1,
          pointRadius: 0,
          pointHoverRadius: 6,
          fill: false
        },
        {
          label: 'Buy House + Remaining BTC',
          data: transformedData.buy,
          borderColor: '#10b981',
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          hidden: !visibleSeries.buy,
          tension: 0.1,
          pointRadius: 0,
          pointHoverRadius: 6,
          fill: false
        },
        {
          label: 'Rent Forever + Keep All BTC',
          data: transformedData.rent,
          borderColor: '#3b82f6',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          hidden: !visibleSeries.rent,
          tension: 0.1,
          pointRadius: 0,
          pointHoverRadius: 6,
          fill: false
        },
        {
          label: 'Lost Opportunity (Worst Strategy)',
          data: transformedData.opportunity,
          borderColor: '#ef4444',
          backgroundColor: 'rgba(239, 68, 68, 0.1)',
          hidden: !visibleSeries.opportunity,
          tension: 0.1,
          pointRadius: 0,
          pointHoverRadius: 6,
          fill: true,
          borderDash: [5, 5]
        }
      ];

      const ctx = document.getElementById('projection-chart');
      if (!ctx) {
        console.error('Chart canvas not found');
        return;
      }

      if (!chart) {
        chart = new Chart(ctx, {
          type: 'line',
          data: { labels, datasets },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: { mode: 'index', intersect: false },
            scales: {
              y: {
                ticks: {
                  callback: v => chartView === 'percentage' ? `${v.toFixed(0)}%` : formatCurrency(v)
                },
                grid: { color: 'rgba(0,0,0,0.1)' }
              },
              x: {
                title: { display: true, text: 'Year' },
                grid: { color: 'rgba(0,0,0,0.1)' },
                ticks: {
                  callback: function(value, index) {
                    return this.getLabelForValue(value);
                  }
                }
              }
            },
            plugins: {
              legend: { display: false }, // Custom legend
              tooltip: {
                backgroundColor: 'rgba(255,255,255,0.95)',
                titleColor: '#000',
                bodyColor: '#000',
                borderColor: '#e5e7eb',
                borderWidth: 1,
                callbacks: {
                  title: (items) => `${items[0].label}`,
                  label: (ctx) => {
                    const value = ctx.parsed.y;
                    const suffix = chartView === 'percentage' ? '%' : '';
                    const prefix = chartView === 'relative' && value >= 0 ? '+' : '';
                    return `${ctx.dataset.label}: ${prefix}${chartView === 'percentage' ? value.toFixed(1) : formatCurrency(value)}${suffix}`;
                  }
                }
              }
            }
          }
        });
      } else {
        chart.data.labels = labels;
        chart.data.datasets = datasets;
        chart.options.scales.y.ticks.callback = v => chartView === 'percentage' ? `${v.toFixed(0)}%` : formatCurrency(v);
        chart.update('none');
      }
    }
    // Chart view controls
    document.getElementById('view-absolute')?.addEventListener('click', () => {
      chartView = 'absolute';
      document.querySelectorAll('[id^="view-"]').forEach(btn => btn.classList.remove('bg-bitcoin-500', 'text-white'));
      document.getElementById('view-absolute').classList.add('bg-bitcoin-500', 'text-white');
      updateChart();
    });

    document.getElementById('view-relative')?.addEventListener('click', () => {
      chartView = 'relative';
      document.querySelectorAll('[id^="view-"]').forEach(btn => btn.classList.remove('bg-bitcoin-500', 'text-white'));
      document.getElementById('view-relative').classList.add('bg-bitcoin-500', 'text-white');
      updateChart();
    });

    document.getElementById('view-percentage')?.addEventListener('click', () => {
      chartView = 'percentage';
      document.querySelectorAll('[id^="view-"]').forEach(btn => btn.classList.remove('bg-bitcoin-500', 'text-white'));
      document.getElementById('view-percentage').classList.add('bg-bitcoin-500', 'text-white');
      updateChart();
    });

    // Series toggle controls
    document.getElementById('toggle-hodl')?.addEventListener('click', () => {
      visibleSeries.hodl = !visibleSeries.hodl;
      document.getElementById('toggle-hodl').style.opacity = visibleSeries.hodl ? '1' : '0.5';
      updateChart();
    });

    document.getElementById('toggle-buy')?.addEventListener('click', () => {
      visibleSeries.buy = !visibleSeries.buy;
      document.getElementById('toggle-buy').style.opacity = visibleSeries.buy ? '1' : '0.5';
      updateChart();
    });

    document.getElementById('toggle-rent')?.addEventListener('click', () => {
      visibleSeries.rent = !visibleSeries.rent;
      document.getElementById('toggle-rent').style.opacity = visibleSeries.rent ? '1' : '0.5';
      updateChart();
    });

    document.getElementById('toggle-opportunity')?.addEventListener('click', () => {
      visibleSeries.opportunity = !visibleSeries.opportunity;
      document.getElementById('toggle-opportunity').style.opacity = visibleSeries.opportunity ? '1' : '0.5';
      updateChart();
    });

    // Wire controls
    document.getElementById('btc-amount').addEventListener('input', e => {
      btcAmount = parseFloat(e.target.value) || 0;
      document.getElementById('btc-value').textContent = formatCurrency(btcAmount * btcPrice);
      updateAll();
    });



    document.getElementById('purchase-timing').addEventListener('change', e => {
      purchaseTiming = e.target.value;
      updateAll();
    });

    document.getElementById('model').addEventListener('change', e => {
      model = e.target.value;
      updateAll();
    });

    document.querySelectorAll('[data-years]').forEach(btn => {
      btn.addEventListener('click', e => {
        document.querySelectorAll('[data-years]').forEach(b => b.classList.remove('bg-bitcoin-500', 'text-white'));
        e.target.classList.add('bg-bitcoin-500', 'text-white');
        years = parseInt(e.target.dataset.years);
        updateAll();
      });
    });

    // Customize carousel controls
    document.getElementById('show-advanced').addEventListener('click', () => {
      document.getElementById('advanced-controls').classList.remove('hidden');
    });

    document.getElementById('close-advanced').addEventListener('click', () => {
      document.getElementById('advanced-controls').classList.add('hidden');
    });

    // Carousel tab switching
    document.querySelectorAll('.carousel-tab').forEach(tab => {
      tab.addEventListener('click', () => {
        const targetTab = tab.dataset.tab;

        // Update tab styles
        document.querySelectorAll('.carousel-tab').forEach(t => {
          t.classList.remove('active', 'border-bitcoin-500', 'text-bitcoin-600', 'dark:text-bitcoin-400');
          t.classList.add('border-transparent', 'text-gray-500');
        });
        tab.classList.add('active', 'border-bitcoin-500', 'text-bitcoin-600', 'dark:text-bitcoin-400');
        tab.classList.remove('border-transparent', 'text-gray-500');

        // Show/hide content
        document.querySelectorAll('.carousel-content').forEach(content => {
          content.classList.add('hidden');
        });
        document.getElementById(`tab-${targetTab}`).classList.remove('hidden');
      });
    });

    // Location presets
    document.querySelectorAll('.location-preset').forEach(preset => {
      preset.addEventListener('click', () => {
        const location = preset.dataset.location;
        const presets = {
          california: { tax: 1.1, insurance: 2200, rent: 3500, appreciation: 4 },
          texas: { tax: 1.8, insurance: 1800, rent: 2200, appreciation: 3.5 },
          florida: { tax: 0.9, insurance: 2500, rent: 2800, appreciation: 3.2 },
          newyork: { tax: 1.4, insurance: 1200, rent: 4200, appreciation: 2.8 },
          national: { tax: 1.2, insurance: 1500, rent: 2500, appreciation: 3 }
        };

        const p = presets[location];
        if (p) {
          document.getElementById('tax-rate').value = p.tax;
          document.getElementById('insurance').value = p.insurance;
          document.getElementById('rent').value = p.rent;
          document.getElementById('appreciation').value = p.appreciation;
          prefs.taxRate = p.tax / 100;
          prefs.insurance = p.insurance;
          prefs.rent = p.rent;
          prefs.appreciation = p.appreciation / 100;
          updateAll();
        }
      });
    });

    // All advanced inputs with instant updates
    const inputMappings = {
      'home-price': (val) => prefs.homePrice = val,
      'down-pct': (val) => prefs.downPct = val / 100,
      'rate': (val) => prefs.rate = val / 100,
      'term': (val) => prefs.term = val,
      'tax-rate': (val) => prefs.taxRate = val / 100,
      'insurance': (val) => prefs.insurance = val,
      'hoa': (val) => prefs.hoa = val,
      'appreciation': (val) => prefs.appreciation = val / 100,
      'maintenance': (val) => prefs.maintenance = val / 100,
      'rent': (val) => prefs.rent = val,
      'rent-growth': (val) => prefs.rentGrowth = val / 100,
      'security-deposit': (val) => prefs.securityDeposit = val,
      'moving-costs': (val) => prefs.movingCosts = val,
      'cost-basis': (val) => prefs.costBasis = val,
      'dca-amount': (val) => prefs.dcaAmount = val,
      'tax-rate-btc': (val) => prefs.taxRateBtc = val / 100,
      'inflation': (val) => prefs.inflation = val / 100,
      'stock-return': (val) => prefs.stockReturn = val / 100
    };

    Object.keys(inputMappings).forEach(id => {
      document.getElementById(id)?.addEventListener('input', e => {
        const val = parseFloat(e.target.value) || 0;
        inputMappings[id](val);
        updateAll();
      });
    });

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', () => {
      updateAll();
      // Update last updated timestamp
      document.getElementById('last-updated').textContent = new Date().toLocaleDateString();
    });

    // Initialize immediately as well
    updateAll();
    document.getElementById('last-updated').textContent = new Date().toLocaleDateString();

    // Fetch live price
    fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd')
      .then(r => r.json())
      .then(d => {
        btcPrice = d.bitcoin.usd;
        document.getElementById('btc-price').textContent = '$' + btcPrice.toLocaleString();
        document.getElementById('btc-value').textContent = formatCurrency(btcAmount * btcPrice);
        updateAll();
      })
      .catch(() => {
        console.log('Using default BTC price');
        updateAll();
      });
  </script>
</BaseLayout>
